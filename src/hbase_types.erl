%%
%% Autogenerated by Thrift Compiler (0.9.3)
%%
%% DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
%%

-module(hbase_types).

-include("hbase_types.hrl").

-export([struct_info/1, struct_info_ext/1]).

struct_info('TCell') ->
  {struct, [{1, string},
          {2, i64}]}
;

struct_info('ColumnDescriptor') ->
  {struct, [{1, string},
          {2, i32},
          {3, string},
          {4, bool},
          {5, string},
          {6, i32},
          {7, i32},
          {8, bool},
          {9, i32}]}
;

struct_info('TRegionInfo') ->
  {struct, [{1, string},
          {2, string},
          {3, i64},
          {4, string},
          {5, byte},
          {6, string},
          {7, i32}]}
;

struct_info('Mutation') ->
  {struct, [{1, bool},
          {2, string},
          {3, string},
          {4, bool}]}
;

struct_info('BatchMutation') ->
  {struct, [{1, string},
          {2, {list, {struct, {'hbase_types', 'Mutation'}}}}]}
;

struct_info('TIncrement') ->
  {struct, [{1, string},
          {2, string},
          {3, string},
          {4, i64}]}
;

struct_info('TColumn') ->
  {struct, [{1, string},
          {2, {struct, {'hbase_types', 'TCell'}}}]}
;

struct_info('TRowResult') ->
  {struct, [{1, string},
          {2, {map, string, {struct, {'hbase_types', 'TCell'}}}},
          {3, {list, {struct, {'hbase_types', 'TColumn'}}}}]}
;

struct_info('TScan') ->
  {struct, [{1, string},
          {2, string},
          {3, i64},
          {4, {list, string}},
          {5, i32},
          {6, string},
          {7, i32},
          {8, bool},
          {9, bool}]}
;

struct_info('TAppend') ->
  {struct, [{1, string},
          {2, string},
          {3, {list, string}},
          {4, {list, string}}]}
;

struct_info('IOError') ->
  {struct, [{1, string}]}
;

struct_info('IllegalArgument') ->
  {struct, [{1, string}]}
;

struct_info('AlreadyExists') ->
  {struct, [{1, string}]}
;

struct_info(_) -> erlang:error(function_clause).

struct_info_ext('TCell') ->
  {struct, [{1, undefined, string, 'value', undefined},
          {2, undefined, i64, 'timestamp', undefined}]}
;

struct_info_ext('ColumnDescriptor') ->
  {struct, [{1, undefined, string, 'name', undefined},
          {2, undefined, i32, 'maxVersions', 3},
          {3, undefined, string, 'compression', "NONE"},
          {4, undefined, bool, 'inMemory', false},
          {5, undefined, string, 'bloomFilterType', "NONE"},
          {6, undefined, i32, 'bloomFilterVectorSize', 0},
          {7, undefined, i32, 'bloomFilterNbHashes', 0},
          {8, undefined, bool, 'blockCacheEnabled', false},
          {9, undefined, i32, 'timeToLive', -1}]}
;

struct_info_ext('TRegionInfo') ->
  {struct, [{1, undefined, string, 'startKey', undefined},
          {2, undefined, string, 'endKey', undefined},
          {3, undefined, i64, 'id', undefined},
          {4, undefined, string, 'name', undefined},
          {5, undefined, byte, 'version', undefined},
          {6, undefined, string, 'serverName', undefined},
          {7, undefined, i32, 'port', undefined}]}
;

struct_info_ext('Mutation') ->
  {struct, [{1, undefined, bool, 'isDelete', false},
          {2, undefined, string, 'column', undefined},
          {3, undefined, string, 'value', undefined},
          {4, undefined, bool, 'writeToWAL', true}]}
;

struct_info_ext('BatchMutation') ->
  {struct, [{1, undefined, string, 'row', undefined},
          {2, undefined, {list, {struct, {'hbase_types', 'Mutation'}}}, 'mutations', []}]}
;

struct_info_ext('TIncrement') ->
  {struct, [{1, undefined, string, 'table', undefined},
          {2, undefined, string, 'row', undefined},
          {3, undefined, string, 'column', undefined},
          {4, undefined, i64, 'ammount', undefined}]}
;

struct_info_ext('TColumn') ->
  {struct, [{1, undefined, string, 'columnName', undefined},
          {2, undefined, {struct, {'hbase_types', 'TCell'}}, 'cell', #'TCell'{}}]}
;

struct_info_ext('TRowResult') ->
  {struct, [{1, undefined, string, 'row', undefined},
          {2, optional, {map, string, {struct, {'hbase_types', 'TCell'}}}, 'columns', dict:new()},
          {3, optional, {list, {struct, {'hbase_types', 'TColumn'}}}, 'sortedColumns', []}]}
;

struct_info_ext('TScan') ->
  {struct, [{1, optional, string, 'startRow', undefined},
          {2, optional, string, 'stopRow', undefined},
          {3, optional, i64, 'timestamp', undefined},
          {4, optional, {list, string}, 'columns', []},
          {5, optional, i32, 'caching', undefined},
          {6, optional, string, 'filterString', undefined},
          {7, optional, i32, 'batchSize', undefined},
          {8, optional, bool, 'sortColumns', undefined},
          {9, optional, bool, 'reversed', undefined}]}
;

struct_info_ext('TAppend') ->
  {struct, [{1, undefined, string, 'table', undefined},
          {2, undefined, string, 'row', undefined},
          {3, undefined, {list, string}, 'columns', []},
          {4, undefined, {list, string}, 'values', []}]}
;

struct_info_ext('IOError') ->
  {struct, [{1, undefined, string, 'message', undefined}]}
;

struct_info_ext('IllegalArgument') ->
  {struct, [{1, undefined, string, 'message', undefined}]}
;

struct_info_ext('AlreadyExists') ->
  {struct, [{1, undefined, string, 'message', undefined}]}
;

struct_info_ext(_) -> erlang:error(function_clause).

